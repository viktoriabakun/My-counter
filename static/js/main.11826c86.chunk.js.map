{"version":3,"sources":["CounterScoreWindow.tsx","Button.tsx","Count.tsx","Input.tsx","Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CounterScoreWindow","props","score","error","maxValue","className","Button","disabled","onClick","title","Count","inc","reset","startValue","Input","name","setValue","value","type","min","onChange","e","inputValue","currentTarget","Settings","setError","setMaxValue","setStartValue","setScore","useState","minValueLocal","setMinValueLocal","maxValueLocal","setMaxValueLocal","isError","useCallback","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.11826c86.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\n\r\n\r\nexport type CounterScoreWindowProps = {\r\n    score: number\r\n    maxValue: number\r\n    error: string\r\n}\r\n\r\nfunction CounterScoreWindow(props: CounterScoreWindowProps) {\r\n    const {score, error, maxValue} = props\r\n    return (\r\n        <div className={'screen'}>\r\n            <div className={score === maxValue ? 'error' : ''}>{error ? '' : score}</div>\r\n            <div className='textError'>{error? error : '' }</div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CounterScoreWindow;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nexport type ButtonProps = {\r\n    title: string\r\n    score?: number,\r\n    onClick: () => void,\r\n    disabled?: boolean\r\n    maxValue?: number\r\n\r\n}\r\n\r\nfunction Button(props: ButtonProps) {\r\n    return <button className={props.disabled ? 'disabled' : 'button'} onClick={props.onClick} disabled={props.disabled}>\r\n        {props.title}\r\n    </button>\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport CounterScoreWindow from \"./CounterScoreWindow\";\r\nimport Button from \"./Button\";\r\nimport './App.css'\r\n\r\n\r\nexport type CountProps = {\r\n    score: number\r\n    inc: () => void\r\n    reset: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    error: string\r\n}\r\n\r\nconst Count = (props: CountProps) => {\r\n    return (\r\n        <div className={'counter'}>\r\n            <CounterScoreWindow score={props.score}\r\n                                maxValue={props.maxValue}\r\n                                error={props.error}/>\r\n            <div className={'buttonContainer'}>\r\n                <Button title={'inc'} onClick={props.inc}\r\n                        disabled={props.score === props.maxValue || props.error != ''}\r\n                        maxValue={props.maxValue}\r\n                        score={props.score}\r\n                />\r\n                <Button title={'reset'} onClick={props.reset}\r\n                        disabled={props.score === props.startValue || props.error != ''}\r\n                        maxValue={props.maxValue}\r\n                        score={props.score}/>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Count;","import React, {ChangeEvent} from 'react'\r\n\r\ntype InputProps = {\r\n    name: string\r\n    value: number\r\n    setValue: (value:number) => void\r\n    error: string\r\n}\r\n\r\nconst Input = (props: InputProps) => {\r\n    const {name, setValue, value} = props\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let inputValue = +e.currentTarget.value\r\n        setValue(inputValue)\r\n    }\r\n\r\n    return (\r\n        <div className={'inputItem'}>\r\n            <span>{props.name}</span>\r\n            <input type=\"number\"\r\n                   className={'inputSet'}\r\n                   min='-1'\r\n                   onChange={onChangeHandler}\r\n            />\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Input;","import React, {useCallback, useEffect, useState} from 'react'\r\nimport Button from \"./Button\";\r\nimport './App.css'\r\nimport Input from \"./Input\";\r\n\r\n\r\ntype SettingsProps = {\r\n    startValue: number\r\n    maxValue: number\r\n    setStartValue: (value: number) => void\r\n    setMaxValue: (value: number) => void\r\n    score: number\r\n    setScore: (value: number) => void\r\n    error: string\r\n    setError: (error: string) => void\r\n\r\n}\r\n\r\n\r\nconst Settings = (props: SettingsProps) => {\r\n\r\n    const { error, maxValue, startValue, setError, setMaxValue, setStartValue, setScore, score } = props\r\n\r\n    const [minValueLocal, setMinValueLocal] = useState<number>(0);\r\n    const [maxValueLocal, setMaxValueLocal] = useState<number>(maxValue);\r\n\r\n    const isError = useCallback(() => {\r\n        if (minValueLocal < 0) {\r\n            setError('min не может быть меньше 0')\r\n        } else if (minValueLocal === maxValueLocal) {\r\n            setError('min не может быть равен max')\r\n        } else if (minValueLocal > maxValueLocal) {\r\n            setError('min не может быть больше max')\r\n        } else {\r\n            setError('')\r\n        }\r\n    }, [minValueLocal, maxValueLocal, setError])\r\n\r\n    useEffect(() => {\r\n        isError()\r\n    }, [minValueLocal, maxValueLocal, isError])\r\n\r\n\r\n    const setButton = () => {\r\n        setStartValue(minValueLocal)\r\n        setMaxValue(maxValueLocal)\r\n        setScore(minValueLocal)\r\n    }\r\n\r\n    return (\r\n        <div className={'counter'}>\r\n            <div className={'settingsScreen'}>\r\n                <Input name={'min value'} value={minValueLocal} setValue={setMinValueLocal} error={error}/>\r\n                <Input name={'max value'} value={maxValueLocal} setValue={setMaxValueLocal} error={error}/>\r\n            </div>\r\n            <div className={'buttonWindow'}>\r\n                <Button title={'set'} onClick={setButton} disabled={!!error}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React, {useState} from 'react';\nimport Count from \"./Count\";\nimport Settings from \"./Settings\";\nimport './App.css'\n\nfunction App() {\n\n    let [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(1)\n    let [score, setScore] = useState<number>(startValue)\n    const [error, setError] = useState<string>('')\n\n    const incCounter = () => {\n        if (score < maxValue) {\n            setScore(score + 1)\n        }\n\n    }\n\n    const resetCounter = () => {\n        setScore(startValue)\n    }\n\n\n    return (\n        <div className={'App'}>\n            <Settings startValue={startValue}\n                      setStartValue={setStartValue}\n                      maxValue={maxValue}\n                      setMaxValue={setMaxValue}\n                      error={error}\n                      setError={setError}\n                      score={score}\n                      setScore={setScore}\n            />\n            <Count score={score}\n                   inc={incCounter}\n                   reset={resetCounter}\n                   error={error}\n                   maxValue={maxValue}\n                   startValue={startValue}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}